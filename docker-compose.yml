version: '3.8'

services:
  # Neo-RS Node
  neo-rs:
    build:
      context: .
      dockerfile: Dockerfile
    image: neo-rs:latest
    container_name: neo-rs-node
    restart: unless-stopped
    
    # Network configuration
    ports:
      - "30332:30332"  # RPC port
      - "30334:30334"  # P2P port
    
    # Environment variables
    environment:
      - NEO_NETWORK=testnet
      - NEO_RPC_PORT=30332
      - NEO_P2P_PORT=30334
      - NEO_DATA_PATH=/opt/neo-rs/data
      - NEO_LOG_LEVEL=info
      - NEO_MAX_PEERS=100
      - NEO_RPC_BIND=0.0.0.0
      - RUST_LOG=info
    
    # Volume mounts for persistence
    volumes:
      - neo-rs-data:/opt/neo-rs/data
      - neo-rs-logs:/opt/neo-rs/logs
      - ./config:/opt/neo-rs/config:ro
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Health check
    healthcheck:
      test: ["/opt/neo-rs/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security
    user: "1000:1000"
    read_only: false
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    
    # Labels
    labels:
      - "com.neo-rs.service=blockchain-node"
      - "com.neo-rs.environment=production"
      - "com.neo-rs.version=1.0"
    
    networks:
      - neo-network

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: neo-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - neo-network
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: neo-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - neo-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Redis cache (optional)
  redis:
    image: redis:7-alpine
    container_name: neo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - neo-network
    profiles:
      - cache

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: neo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - neo-network
    profiles:
      - proxy
    depends_on:
      - neo-rs

# Named volumes for data persistence
volumes:
  neo-rs-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  neo-rs-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  redis_data:
    driver: local

# Networks
networks:
  neo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16