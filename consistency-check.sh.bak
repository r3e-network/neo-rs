#!/bin/bash

# Neo-RS Codebase Consistency Check Script

echo "=== Neo-RS Codebase Consistency Check ==="
echo "Timestamp: $(date)"
echo

# Color codes
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Initialize counters
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0
WARNINGS=0

# Function to run a check
check() {
    local description="$1"
    local command="$2"
    local expected="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    result=$(eval "$command" 2>/dev/null)
    
    if [[ "$result" == "$expected" ]]; then
        echo -e "${GREEN}✓ PASS${NC} - $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${RED}✗ FAIL${NC} - $description (found: $result, expected: $expected)"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

# Function to check pattern absence
check_absent() {
    local description="$1"
    local command="$2"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    result=$(eval "$command" 2>/dev/null | wc -l | tr -d ' ')
    
    if [[ "$result" == "0" ]]; then
        echo -e "${GREEN}✓ PASS${NC} - $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${RED}✗ FAIL${NC} - $description (found $result occurrences)"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
    fi
}

# Function to check pattern count
check_count() {
    local description="$1"
    local command="$2"
    local max_allowed="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    result=$(eval "$command" 2>/dev/null | wc -l | tr -d ' ')
    
    if [[ "$result" -le "$max_allowed" ]]; then
        echo -e "${GREEN}✓ PASS${NC} - $description (found: $result, max allowed: $max_allowed)"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
    else
        echo -e "${YELLOW}⚠ WARN${NC} - $description (found: $result, max allowed: $max_allowed)"
        WARNINGS=$((WARNINGS + 1))
    fi
}

echo -e "${BLUE}=== 1. Debug Statement Consistency ===${NC}"
check_absent "No println! statements in production code" "grep -r 'println!' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(test|example|cli/src/console|cli/src/main)' | grep -v '//'"
check_absent "No dbg! statements in production code" "grep -r 'dbg!' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(test|example)'"
check_absent "No print! statements in production code" "grep -r 'print!' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(test|example|println|cli/src/console)'"
echo

echo -e "${BLUE}=== 2. Error Handling Consistency ===${NC}"
check_absent "No panic! in production code" "grep -r 'panic!' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(test|unreachable|unimplemented)'"
check_absent "No unwrap() in production code" "grep -r '\.unwrap()' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(test|example)'"
check_absent "No expect() without context" "grep -r '\.expect(\"\")' --include='*.rs' crates/ node/src/ 2>/dev/null"
echo

echo -e "${BLUE}=== 3. TODO and Production implementation Consistency ===${NC}"
check_count "TODO comments" "grep -r 'TODO:' --include='*.rs' crates/ node/src/ 2>/dev/null" 5
check_absent "FIXME comments" "grep -r 'FIXME:' --include='*.rs' crates/ node/src/ 2>/dev/null"
check_absent "XXX comments" "grep -r 'XXX:' --include='*.rs' crates/ node/src/ 2>/dev/null"
check_absent "HACK comments" "grep -r 'HACK:' --include='*.rs' crates/ node/src/ 2>/dev/null"
echo

echo -e "${BLUE}=== 4. Code Quality Consistency ===${NC}"
check_absent "Commented out code" "grep -r '^[[:space:]]*//.*[=();{]' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(//[[:space:]]*[A-Z]|example|test)'"
check_count "Functions longer than 100 lines" "find crates node/src -name '*.rs' -exec awk '/^[[:space:]]*(pub[[:space:]]+)?(async[[:space:]]+)?fn[[:space:]]+/ {start=NR} start && /^[[:space:]]*}/ {if(NR-start>100) print FILENAME}' {} \; 2>/dev/null | sort -u" 10
check_absent "Multiple empty lines" "grep -r -E '^[[:space:]]*$' --include='*.rs' crates/ node/src/ 2>/dev/null | awk 'NR>1 && prev==\"\" && \$0==\"\" {print} {prev=\$0}'"
echo

echo -e "${BLUE}=== 5. Import Consistency ===${NC}"
check_absent "Wildcard imports" "grep -r 'use.*::\*;' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(test|prelude|#\[cfg\(test\)]|^[[:space:]]*//)'"
check_absent "Unused imports" "grep -r '#\[allow(unused_imports)\]' --include='*.rs' crates/ node/src/ 2>/dev/null"
echo

echo -e "${BLUE}=== 6. Magic Number Consistency ===${NC}"
# Check for common magic numbers (excluding tests and known constants)
check_absent "Magic number 15 (use SECONDS_PER_BLOCK)" "grep -r -E '\\b15\\b' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(test|SECONDS_PER_BLOCK|const|//|example)'"
check_absent "Magic number 262144 (use MAX_BLOCK_SIZE)" "grep -r '262144' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(MAX_BLOCK_SIZE|const)'"
check_absent "Magic number 102400 (use MAX_TRANSACTION_SIZE)" "grep -r '102400' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(MAX_TRANSACTION_SIZE|const)'"
echo

echo -e "${BLUE}=== 7. Naming Consistency ===${NC}"
check_absent "Snake case violations in function names" "grep -r -E 'fn[[:space:]]+[A-Z]' --include='*.rs' crates/ node/src/ 2>/dev/null"
check_absent "CamelCase violations in variable names" "grep -r -E 'let[[:space:]]+[A-Z]' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(const|static)'"
echo

echo -e "${BLUE}=== 8. Documentation Consistency ===${NC}"
check_count "Public functions without documentation" "grep -B1 -E '^[[:space:]]*pub[[:space:]]+(async[[:space:]]+)?fn' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -B1 'pub' | grep -v -E '(///|test|example)' | grep 'pub'" 20
check_count "Public structs without documentation" "grep -B1 -E '^[[:space:]]*pub[[:space:]]+struct' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -B1 'pub struct' | grep -v -E '(///|test|example)' | grep 'pub struct'" 10
echo

echo -e "${BLUE}=== 9. Type Safety Consistency ===${NC}"
check_absent "Use of 'any' type in TypeScript files" "grep -r ': any' --include='*.ts' --include='*.tsx' 2>/dev/null"
check_absent "Unsafe blocks without safety comments" "grep -B1 'unsafe {' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -B1 'unsafe' | grep -v 'SAFETY:'"
echo

echo -e "${BLUE}=== 10. File Organization Consistency ===${NC}"
# Check for overly large files
check_count "Files larger than 1000 lines" "find crates node/src -name '*.rs' -exec wc -l {} \; 2>/dev/null | awk '\$1 > 1000 {print}'" 5
# Check for proper module organization
check_absent "Multiple public items in mod.rs" "find crates node/src -name 'mod.rs' -exec grep -c '^pub' {} \; 2>/dev/null | awk '\$1 > 10 {print}'"
echo

echo -e "${BLUE}=== 11. Dependency Consistency ===${NC}"
# Check Cargo.toml files for version consistency
check_absent "Git dependencies" "grep -r 'git = ' --include='Cargo.toml' crates/ 2>/dev/null"
check_absent "Path dependencies in release" "grep -r 'path = ' --include='Cargo.toml' crates/ 2>/dev/null | grep -v workspace"
echo

echo -e "${BLUE}=== 12. Security Consistency ===${NC}"
check_absent "Hardcoded credentials" "grep -r -E '(password|secret|key)[[:space:]]*=[[:space:]]*\"[^\"]+\"' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(test|example|empty|placeholder)'"
check_absent "Hardcoded IP addresses" "grep -r -E '\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b' --include='*.rs' crates/ node/src/ 2>/dev/null | grep -v -E '(0\\.0\\.0\\.0|127\\.0\\.0\\.1|localhost|test|example)'"
echo

# Summary
echo -e "${BLUE}=== Consistency Check Summary ===${NC}"
echo "Total Checks: $TOTAL_CHECKS"
echo -e "${GREEN}Passed: $PASSED_CHECKS${NC}"
echo -e "${YELLOW}Warnings: $WARNINGS${NC}"
echo -e "${RED}Failed: $FAILED_CHECKS${NC}"

SCORE=$((PASSED_CHECKS * 100 / TOTAL_CHECKS))
echo "Consistency Score: ${SCORE}%"

if [[ $FAILED_CHECKS -eq 0 && $WARNINGS -eq 0 ]]; then
    echo -e "\n${GREEN}✓ EXCELLENT CONSISTENCY${NC}"
    echo "The codebase maintains excellent consistency standards."
elif [[ $FAILED_CHECKS -eq 0 ]]; then
    echo -e "\n${GREEN}✓ GOOD CONSISTENCY${NC}"
    echo "The codebase has good consistency with minor warnings."
elif [[ $FAILED_CHECKS -le 5 ]]; then
    echo -e "\n${YELLOW}⚠ ACCEPTABLE CONSISTENCY${NC}"
    echo "The codebase has acceptable consistency but needs improvements."
else
    echo -e "\n${RED}✗ POOR CONSISTENCY${NC}"
    echo "The codebase has significant consistency issues that need attention."
fi

# Machine-readable output
echo
echo "=== Machine-Readable Results ==="
echo "CONSISTENCY_STATUS=$([ $FAILED_CHECKS -eq 0 ] && echo 'GOOD' || echo 'NEEDS_IMPROVEMENT')"
echo "TOTAL_CHECKS=$TOTAL_CHECKS"
echo "PASSED=$PASSED_CHECKS"
echo "WARNINGS=$WARNINGS"
echo "FAILED=$FAILED_CHECKS"
echo "SCORE=$SCORE"
echo "TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)"

echo
echo "Consistency check completed at $(date)"