name: Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  schedule:
    # Run nightly at 2 AM UTC for continuous validation
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug logging'
        required: false
        default: 'false'

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  CARGO_INCREMENTAL: 0
  CI: true

jobs:
  # Quick validation checks
  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-quick-checks
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc g++ cmake make pkg-config \
            llvm-14 libclang-14-dev clang-14 \
            librocksdb-dev libsnappy-dev liblz4-dev libzstd-dev \
            zlib1g-dev libbz2-dev libssl-dev
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV

      - name: Verify Formatting
        run: |
          echo "🔍 Checking code formatting..."
          cargo fmt --all -- --check
          echo "✅ Code formatting verified"

      - name: Run Clippy Linter
        run: |
          echo "🔍 Running clippy static analysis..."
          cargo clippy --workspace --all-targets --all-features -- \
            -W clippy::all \
            -W clippy::pedantic \
            -W clippy::nursery \
            -A clippy::module_name_repetitions \
            -A clippy::must_use_candidate \
            -A clippy::missing_errors_doc
          echo "✅ Static analysis completed"

      - name: Check Documentation
        run: |
          echo "📚 Verifying documentation builds..."
          cargo doc --workspace --all-features --no-deps
          echo "✅ Documentation verified"

  # Comprehensive test suite
  test-suite:
    name: Test Suite - ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.rust }}-test
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc g++ cmake make pkg-config \
            llvm-14 libclang-14-dev clang-14 \
            librocksdb-dev libsnappy-dev liblz4-dev libzstd-dev \
            zlib1g-dev libbz2-dev libssl-dev
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install rocksdb snappy lz4 zstd openssl@3
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install llvm rocksdb -y
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV

      - name: Build Project
        run: |
          echo "🔨 Building project with all features..."
          cargo build --workspace --all-targets --all-features
          echo "✅ Build successful"

      - name: Run Unit Tests
        run: |
          echo "🧪 Running unit tests..."
          cargo test --workspace --lib --all-features -- --test-threads=4
          echo "✅ Unit tests passed"

      - name: Run Integration Tests
        run: |
          echo "🧪 Running integration tests..."
          cargo test --workspace --test '*' --all-features -- --test-threads=2
          echo "✅ Integration tests passed"

      - name: Run Documentation Tests
        run: |
          echo "📚 Running documentation tests..."
          cargo test --workspace --doc --all-features
          echo "✅ Documentation tests passed"

  # Feature compatibility testing
  feature-matrix:
    name: Feature Matrix Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        features:
          - ""  # default features
          - "--all-features"
          - "--no-default-features"
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-features-${{ matrix.features }}

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc g++ cmake make pkg-config \
            llvm-14 libclang-14-dev clang-14 \
            librocksdb-dev libsnappy-dev liblz4-dev libzstd-dev \
            zlib1g-dev libbz2-dev libssl-dev
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV

      - name: Test with Features ${{ matrix.features }}
        run: |
          echo "🧪 Testing with features: ${{ matrix.features }}"
          cargo test --workspace ${{ matrix.features }}
          echo "✅ Feature tests passed"

  # Code coverage analysis
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-coverage

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc g++ cmake make pkg-config \
            llvm-14 libclang-14-dev clang-14 \
            librocksdb-dev libsnappy-dev liblz4-dev libzstd-dev \
            zlib1g-dev libbz2-dev libssl-dev
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV

      - name: Install Tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate Coverage Report
        run: |
          echo "📊 Generating code coverage report..."
          cargo tarpaulin --workspace --all-features \
            --timeout 300 \
            --exclude-files "*/tests/*" \
            --exclude-files "*/benches/*" \
            --exclude-files "*/examples/*" \
            --out xml \
            --output-dir coverage
          echo "✅ Coverage report generated"

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/cobertura.xml
          flags: unittests
          name: neo-rs-coverage
          fail_ci_if_error: false

  # Benchmark regression detection
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-benchmarks

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc g++ cmake make pkg-config \
            llvm-14 libclang-14-dev clang-14 \
            librocksdb-dev libsnappy-dev liblz4-dev libzstd-dev \
            zlib1g-dev libbz2-dev libssl-dev
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV

      - name: Run Benchmarks
        run: |
          echo "⚡ Running performance benchmarks..."
          cargo bench --workspace --all-features -- --output-format bencher | tee bench-results.txt
          echo "✅ Benchmarks completed"

      - name: Store Benchmark Results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: bench-results.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Minimum supported Rust version check
  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Read MSRV from Cargo.toml
        id: msrv
        run: |
          MSRV=$(grep "rust-version" Cargo.toml | head -1 | cut -d'"' -f2)
          echo "msrv=$MSRV" >> $GITHUB_OUTPUT

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-msrv

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc g++ cmake make pkg-config \
            llvm-14 libclang-14-dev clang-14 \
            librocksdb-dev libsnappy-dev liblz4-dev libzstd-dev \
            zlib1g-dev libbz2-dev libssl-dev
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV

      - name: Check MSRV Compatibility
        run: |
          echo "🔍 Checking MSRV ${{ steps.msrv.outputs.msrv }} compatibility..."
          cargo check --workspace --all-features
          echo "✅ MSRV check passed"

  # Final CI status aggregation
  ci-success:
    name: CI Success Gate
    runs-on: ubuntu-latest
    needs: [quick-checks, test-suite, feature-matrix, coverage, msrv]
    if: always()
    steps:
      - name: Verify All Jobs Passed
        run: |
          if [[ "${{ needs.quick-checks.result }}" != "success" ]]; then
            echo "❌ Quick checks failed"
            exit 1
          fi
          if [[ "${{ needs.test-suite.result }}" != "success" ]]; then
            echo "❌ Test suite failed"
            exit 1
          fi
          if [[ "${{ needs.feature-matrix.result }}" != "success" ]]; then
            echo "❌ Feature matrix tests failed"
            exit 1
          fi
          if [[ "${{ needs.coverage.result }}" != "success" ]] && [[ "${{ needs.coverage.result }}" != "skipped" ]]; then
            echo "❌ Coverage analysis failed"
            exit 1
          fi
          if [[ "${{ needs.msrv.result }}" != "success" ]]; then
            echo "❌ MSRV check failed"
            exit 1
          fi
          echo "✅ All CI checks passed successfully!"

      - name: Create Status Badge
        if: github.ref == 'refs/heads/main'
        run: |
          echo "[![CI Status](https://github.com/${{ github.repository }}/workflows/Continuous%20Integration/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/ci.yml)" > ci-status.md