name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog for this version
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog section for this version
            sed -n "/## ${VERSION}/,/## /p" CHANGELOG.md | head -n -1 > release_notes.md
          else
            echo "Release $VERSION" > release_notes.md
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Neo-RS ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

  # Build binaries for multiple platforms
  build-binaries:
    name: Build Binaries
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: neo-rs-linux-x86_64
            binary_name: neo-rs
            
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: neo-rs-linux-x86_64-musl
            binary_name: neo-rs
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: neo-rs-linux-aarch64
            binary_name: neo-rs
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: neo-rs-windows-x86_64
            binary_name: neo-rs.exe
            
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: neo-rs-macos-x86_64
            binary_name: neo-rs
            
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: neo-rs-macos-aarch64
            binary_name: neo-rs

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
          fi
          if [[ "${{ matrix.target }}" == "aarch64"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
          sudo apt-get install -y librocksdb-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install rocksdb

      - name: Install cross (for cross-compilation)
        if: matrix.target != 'x86_64-unknown-linux-gnu' && matrix.os == 'ubuntu-latest'
        run: cargo install cross

      - name: Build binary
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.target }}" != "x86_64-unknown-linux-gnu" ]]; then
            cross build --release --target ${{ matrix.target }} --bin neo-rs
          else
            cargo build --release --target ${{ matrix.target }} --bin neo-rs
          fi

      - name: Package binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.artifact_name }}.zip ${{ matrix.binary_name }}
          else
            tar czvf ../../../${{ matrix.artifact_name }}.tar.gz ${{ matrix.binary_name }}
          fi

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.artifact_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: ${{ matrix.artifact_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

  # Build and upload Docker images
  docker:
    name: Build Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            neo/neo-rs:latest
            neo/neo-rs:${{ steps.get_version.outputs.VERSION }}
            ghcr.io/neo-project/neo-rs:latest
            ghcr.io/neo-project/neo-rs:${{ steps.get_version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Publish to crates.io (if configured)
  publish-crates:
    name: Publish Crates
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    if: "!contains(github.ref, '-')" # Only for stable releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-publish-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y librocksdb-dev

      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish crates in dependency order
          
          # Foundation crates (no dependencies)
          cargo publish -p neo-core || true
          cargo publish -p neo-cryptography || true
          cargo publish -p neo-io || true
          
          sleep 10
          
          # Utility crates
          cargo publish -p neo-json || true
          cargo publish -p neo-mpt-trie || true
          cargo publish -p neo-bls12-381 || true
          cargo publish -p neo-extensions || true
          cargo publish -p neo-config || true
          
          sleep 10
          
          # Service crates
          cargo publish -p neo-vm || true
          cargo publish -p neo-smart-contract || true
          cargo publish -p neo-persistence || true
          
          sleep 10
          
          # Higher level crates
          cargo publish -p neo-ledger || true
          cargo publish -p neo-consensus || true
          cargo publish -p neo-network || true
          
          sleep 10
          
          # Interface crates
          cargo publish -p neo-rpc-client || true
          cargo publish -p neo-rpc-server || true
          cargo publish -p neo-wallets || true
          cargo publish -p neo-cli || true
          
          sleep 10
          
          # Main crate
          cargo publish || true

  # Update documentation
  update-docs:
    name: Update Documentation
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-docs-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y librocksdb-dev

      - name: Build documentation
        run: |
          cargo doc --all-features --no-deps
          echo '<meta http-equiv=refresh content=0;url=neo_rs/index.html>' > target/doc/index.html

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: docs/${{ github.ref_name }}

  # Post-release notifications
  notify:
    name: Post-release Notifications
    needs: [create-release, build-binaries, docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Get tag version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Notify success
        if: needs.build-binaries.result == 'success' && needs.docker.result == 'success'
        run: |
          echo "✅ Release ${{ steps.get_version.outputs.VERSION }} completed successfully!"
          echo "- Binaries built for all platforms"
          echo "- Docker images published"
          echo "- Documentation updated"

      - name: Notify failure
        if: needs.build-binaries.result == 'failure' || needs.docker.result == 'failure'
        run: |
          echo "❌ Release ${{ steps.get_version.outputs.VERSION }} failed!"
          echo "Please check the workflow logs for details."
          exit 1