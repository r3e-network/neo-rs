name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.3.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

# Cancel previous release workflows
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  CARGO_INCREMENTAL: 0
  CI: true

jobs:
  # Validate release prerequisites
  validate-release:
    name: Validate Release Prerequisites
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is-prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version and Tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
            PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            TAG="${{ github.ref_name }}"
            if [[ $TAG =~ -alpha|-beta|-rc ]]; then
              PRERELEASE="true"
            else
              PRERELEASE="false"
            fi
          fi
          
          # Extract version without 'v' prefix
          VERSION=${TAG#v}
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "📋 Release Details:"
          echo "  Tag: $TAG"
          echo "  Version: $VERSION"
          echo "  Pre-release: $PRERELEASE"

      - name: Verify Tag Format
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid tag format: $TAG"
            echo "Expected format: v{major}.{minor}.{patch} or v{major}.{minor}.{patch}-{suffix}"
            exit 1
          fi
          echo "✅ Tag format validated: $TAG"

      - name: Check Version Consistency
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          
          if [[ "$VERSION" != "$CARGO_VERSION" ]]; then
            echo "❌ Version mismatch:"
            echo "  Tag version: $VERSION"
            echo "  Cargo.toml version: $CARGO_VERSION"
            echo "Please update Cargo.toml version to match the release tag"
            exit 1
          fi
          echo "✅ Version consistency verified: $VERSION"

      - name: Verify Changelog Entry
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "❌ CHANGELOG.md missing entry for version $VERSION"
            echo "Please add a changelog entry for this release"
            exit 1
          fi
          echo "✅ Changelog entry found for version $VERSION"

  # Build binaries for multiple platforms
  build-binaries:
    name: Build - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: validate-release
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: true
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-release
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target

      - name: Install Cross (if needed)
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && !matrix.cross
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc g++ cmake make pkg-config \
            llvm-14 libclang-14-dev clang-14 \
            librocksdb-dev libsnappy-dev liblz4-dev libzstd-dev \
            zlib1g-dev libbz2-dev libssl-dev
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install rocksdb snappy lz4 zstd openssl@3
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install llvm rocksdb -y
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV

      - name: Build Binary
        run: |
          if [[ "${{ matrix.cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.target }} --bin neo-node -p neo-node
          else
            cargo build --release --target ${{ matrix.target }} --bin neo-node -p neo-node
          fi

      - name: Prepare Binary
        shell: bash
        run: |
          TARGET=${{ matrix.target }}
          VERSION=${{ needs.validate-release.outputs.version }}
          
          # Set binary path and name
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_PATH="target/$TARGET/release/neo-node.exe"
            BINARY_NAME="neo-node-v$VERSION-$TARGET.exe"
          else
            BINARY_PATH="target/$TARGET/release/neo-node"
            BINARY_NAME="neo-node-v$VERSION-$TARGET"
          fi
          
          # Verify binary exists
          if [[ ! -f "$BINARY_PATH" ]]; then
            echo "❌ Binary not found at: $BINARY_PATH"
            ls -la target/$TARGET/release/
            exit 1
          fi
          
          # Copy binary with versioned name
          cp "$BINARY_PATH" "$BINARY_NAME"
          
          # Create checksum
          if command -v sha256sum >/dev/null; then
            sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
          elif command -v shasum >/dev/null; then
            shasum -a 256 "$BINARY_NAME" > "$BINARY_NAME.sha256"
          else
            echo "No checksum utility available"
          fi
          
          # Get binary info
          ls -lah "$BINARY_NAME"
          echo "Binary prepared: $BINARY_NAME"
          
          # Save for upload
          echo "binary_name=$BINARY_NAME" >> $GITHUB_ENV
          echo "checksum_name=$BINARY_NAME.sha256" >> $GITHUB_ENV

      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: neo-node-${{ matrix.target }}
          path: |
            ${{ env.binary_name }}
            ${{ env.checksum_name }}
          retention-days: 7

  # Generate release notes and changelog
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-release
    timeout-minutes: 10
    outputs:
      release-notes: ${{ steps.notes.outputs.release-notes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          TAG="${{ needs.validate-release.outputs.tag }}"
          
          # Extract changelog section for this version
          echo "# Release Notes for Neo-RS $VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          # Get changelog section between this version and next version marker
          awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md >> release_notes.md
          
          # Add binary download section
          cat >> release_notes.md << 'EOF'

## 📦 Binary Downloads

Download pre-compiled binaries for your platform:

### Linux
- **x86_64 (GNU)**: `neo-node-v$VERSION-x86_64-unknown-linux-gnu`
- **x86_64 (musl)**: `neo-node-v$VERSION-x86_64-unknown-linux-musl`
- **ARM64**: `neo-node-v$VERSION-aarch64-unknown-linux-gnu`

### macOS
- **Intel**: `neo-node-v$VERSION-x86_64-apple-darwin`
- **Apple Silicon**: `neo-node-v$VERSION-aarch64-apple-darwin`

### Windows
- **x86_64**: `neo-node-v$VERSION-x86_64-pc-windows-msvc.exe`

All binaries include SHA256 checksums for verification.

## 🚀 Quick Start

```bash
# Download binary for your platform
wget https://github.com/r3e-network/neo-rs/releases/download/$TAG/neo-node-v$VERSION-<your-platform>

# Make executable (Linux/macOS)
chmod +x neo-node-v$VERSION-<your-platform>

# Run the node
./neo-node-v$VERSION-<your-platform> --help
```

## 🔧 Building from Source

```bash
# Clone repository
git clone https://github.com/r3e-network/neo-rs.git
cd neo-rs

# Build optimized binary
cargo build --release --bin neo-node

# Binary will be at: target/release/neo-node
```

EOF
          
          # Replace version placeholders
          sed -i "s/\$VERSION/$VERSION/g" release_notes.md
          sed -i "s/\$TAG/$TAG/g" release_notes.md
          
          echo "Release notes generated:"
          cat release_notes.md
          
          # Set output for GitHub Actions
          {
            echo 'release-notes<<EOF'
            cat release_notes.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-binaries, generate-release-notes]
    timeout-minutes: 15
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Binary Artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Prepare Release Assets
        run: |
          echo "📦 Preparing release assets..."
          mkdir -p release-assets
          
          # Move all binaries to release assets
          find binaries/ -type f \( -name "neo-node-*" -o -name "*.sha256" \) -exec mv {} release-assets/ \;
          
          echo "Release assets:"
          ls -la release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: "Neo-RS ${{ needs.validate-release.outputs.version }}"
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          files: release-assets/*
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          draft: ${{ github.event.inputs.draft == 'true' }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          TAG="${{ needs.validate-release.outputs.tag }}"
          VERSION="${{ needs.validate-release.outputs.version }}"
          PRERELEASE="${{ needs.validate-release.outputs.is-prerelease }}"
          
          echo "🎉 Release created successfully!"
          echo "📋 Release Details:"
          echo "  Tag: $TAG"
          echo "  Version: $VERSION"
          echo "  Pre-release: $PRERELEASE"
          echo "  URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"
          
          echo "📦 Binary Assets:"
          ls -1 release-assets/ | grep -E '\.(exe)?$' | sed 's/^/  /'

  # Post-release notifications and cleanup
  post-release:
    name: Post-release Actions
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    timeout-minutes: 5
    steps:
      - name: Release Success Notification
        run: |
          TAG="${{ needs.validate-release.outputs.tag }}"
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          echo "✅ Neo-RS $VERSION released successfully!"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"
          echo ""
          echo "Next steps:"
          echo "1. Announce the release to the community"
          echo "2. Update documentation if needed"
          echo "3. Consider creating a crates.io release"
          echo "4. Update any deployment scripts"

      - name: Cleanup Artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            neo-node-*
          failOnError: false

# Workflow summary for GitHub Actions UI
# This helps track release progress and provides quick links
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [validate-release, build-binaries, create-release]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          TAG="${{ needs.validate-release.outputs.tag }}"
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          echo "## 🚀 Neo-RS Release Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** $VERSION ($TAG)" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** $(if [[ '${{ needs.create-release.result }}' == 'success' ]]; then echo '✅ Success'; else echo '❌ Failed'; fi)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ '${{ needs.create-release.result }}' == 'success' ]]; then
            echo "### 📦 Release Created" >> $GITHUB_STEP_SUMMARY
            echo "- **URL:** https://github.com/${{ github.repository }}/releases/tag/$TAG" >> $GITHUB_STEP_SUMMARY
            echo "- **Binaries:** 6 platforms supported" >> $GITHUB_STEP_SUMMARY
            echo "- **Pre-release:** ${{ needs.validate-release.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Release Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi