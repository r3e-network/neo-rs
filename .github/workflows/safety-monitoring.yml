name: Safety & Monitoring CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run safety checks daily
    - cron: '0 0 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  safety-check:
    name: Safety Pattern Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check for unsafe code
        run: |
          echo "Checking for unsafe code blocks..."
          ! grep -r "unsafe" --include="*.rs" crates/ || echo "Warning: Unsafe code detected"
      
      - name: Check for unwrap() calls
        run: |
          echo "Checking for unwrap() calls..."
          ! grep -r "\.unwrap()" --include="*.rs" crates/ || echo "Warning: unwrap() calls detected"
      
      - name: Check for panic! macros
        run: |
          echo "Checking for panic! macros..."
          ! grep -r "panic!" --include="*.rs" crates/ || echo "Warning: panic! macros detected"
      
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Check formatting
        run: cargo fmt --all -- --check

  integration-tests:
    name: Safety Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run integration tests
        run: |
          cargo test --test safety_integration_tests --verbose
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/test-results/

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run benchmarks
        run: |
          cargo bench --bench safety_benchmarks -- --output-format bencher | tee output.txt
      
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: target/criterion/

  monitoring-dashboard:
    name: Build Monitoring Dashboard
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build dashboard
        run: |
          cargo build --features monitoring-dashboard
      
      - name: Test dashboard
        run: |
          cargo test monitoring_dashboard --verbose

  metrics-collection:
    name: Collect Build Metrics
    runs-on: ubuntu-latest
    needs: [safety-check, integration-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build with metrics
        run: |
          cargo build --release 2>&1 | tee build.log
          
      - name: Extract metrics
        run: |
          echo "## Build Metrics" > metrics.md
          echo "- Compile time: $(grep -oP 'Finished .* in \K[0-9.]+s' build.log || echo 'N/A')" >> metrics.md
          echo "- Binary size: $(du -h target/release/neo-node 2>/dev/null | cut -f1 || echo 'N/A')" >> metrics.md
          echo "- Dependencies: $(cargo tree | wc -l)" >> metrics.md
          
      - name: Count safety improvements
        run: |
          echo "## Safety Metrics" >> metrics.md
          echo "- Safe error handlers: $(grep -r "SafeError" --include="*.rs" crates/ | wc -l)" >> metrics.md
          echo "- Memory pools: $(grep -r "MemoryPool" --include="*.rs" crates/ | wc -l)" >> metrics.md
          echo "- Monitoring points: $(grep -r "system_monitoring::" --include="*.rs" crates/ | wc -l)" >> metrics.md
          
      - name: Post metrics as comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const metrics = fs.readFileSync('metrics.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: metrics
            });

  deploy-monitoring:
    name: Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [safety-check, integration-tests, benchmarks]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build release with monitoring
        run: |
          cargo build --release --features monitoring-dashboard
      
      - name: Package monitoring artifacts
        run: |
          mkdir -p monitoring-package
          cp target/release/neo-node monitoring-package/
          cp -r docs/SAFETY_PATTERNS.md monitoring-package/
          tar -czf monitoring-package.tar.gz monitoring-package/
      
      - name: Upload monitoring package
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-package
          path: monitoring-package.tar.gz
      
      # In a real deployment, you would deploy to your monitoring infrastructure here
      - name: Deploy to monitoring server
        run: |
          echo "Would deploy monitoring dashboard to production server"
          echo "Dashboard URL: https://monitoring.neo-rs.example.com"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit
      
      - name: Check for known vulnerabilities
        run: |
          cargo audit --deny warnings

  coverage-report:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage report
        run: |
          cargo tarpaulin --out Xml --all-features --workspace \
            --exclude-files "*/tests/*" \
            --exclude-files "*/benches/*" \
            --exclude-files "*/examples/*"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          fail_ci_if_error: true
          verbose: true

  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [safety-check, integration-tests, benchmarks, security-audit]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "Safety check: ${{ needs.safety-check.result }}"
          echo "Integration tests: ${{ needs.integration-tests.result }}"
          echo "Benchmarks: ${{ needs.benchmarks.result }}"
          echo "Security audit: ${{ needs.security-audit.result }}"
      
      - name: Send success notification
        if: needs.safety-check.result == 'success' && needs.integration-tests.result == 'success'
        run: |
          echo "✅ All safety checks passed!"
      
      - name: Send failure notification
        if: needs.safety-check.result == 'failure' || needs.integration-tests.result == 'failure'
        run: |
          echo "❌ Safety checks failed - investigation required"