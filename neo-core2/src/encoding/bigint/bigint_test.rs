use std::str::FromStr;
use num_bigint::BigInt;
use num_traits::ToPrimitive;
use std::cmp::Ordering;

#[cfg(test)]
mod tests {
    use super::*;
    use std::i64;
    use num_bigint::BigInt;
    use num_traits::ToPrimitive;
    use std::cmp::Ordering;

    // testCases were generated using C# node
    // https://dotnetfiddle.net/trQ4xt
    const TEST_CASES: &[(i64, &[u8])] = &[
        (0, &[]),
        (1, &[1]),
        (-1, &[255]),
        (2, &[2]),
        (-2, &[254]),
        (127, &[127]),
        (-127, &[129]),
        (128, &[128, 0]),
        (-128, &[128]),
        (129, &[129, 0]),
        (-129, &[127, 255]),
        (255, &[255, 0]),
        (-255, &[1, 255]),
        (256, &[0, 1]),
        (-256, &[0, 255]),
        (123456789, &[21, 205, 91, 7]),
        (-123456789, &[235, 50, 164, 248]),
        (-6777216, &[128, 150, 152]), // tx c8ba2ce29e07447639b9b658db3930c4cce617652d325e78b768ee9d4dbd72b8
        (6777216, &[128, 105, 103]),
        (32639, &[127, 127]),
        (-32641, &[127, 128]),
        (8355711, &[127, 127, 127]),
        (-8355969, &[127, 127, 128]),
        (2139062143, &[127, 127, 127, 127]),
        (-2139127937, &[127, 127, 127, 128]),
        (547599908735, &[127, 127, 127, 127, 127]),
        (-547616751745, &[127, 127, 127, 127, 128]),
        (140185576636287, &[127, 127, 127, 127, 127, 127]),
        (-140189888446593, &[127, 127, 127, 127, 127, 128]),
        (35887507618889599, &[127, 127, 127, 127, 127, 127, 127]),
        (-35888611442327681, &[127, 127, 127, 127, 127, 127, 128]),
        (9187201950435737471, &[127, 127, 127, 127, 127, 127, 127, 127]),
        (-9187484529235886209, &[127, 127, 127, 127, 127, 127, 127, 128]),
        (3, &[0x03]),
        (128, &[0x80, 0x00]),
        (200, &[0xc8, 0x00]),
        (256, &[0x00, 0x01]),
        (2005, &[0xd5, 0x07]),
        (10197, &[0xd5, 0x27]),
        (33023, &[0xff, 0x80, 0x00]),
        (2368349, &[0x5d, 0x23, 0x24]),
        (10756957, &[0x5d, 0x23, 0xa4, 0x00]),
        (193100307, &[0x13, 0x7a, 0x82, 0x0b]),
        (1266842131, &[0x13, 0x7a, 0x82, 0x4b]),
        (i64::MAX, &[0xff, 0xff, 0xff, 0x7f]),
        (-1, &[0xff]),
        (-128, &[0x80]),
        (-172, &[0x54, 0xff]),
        (-23439, &[0x71, 0xa4]),
        (-51301, &[0x9b, 0x37, 0xff]),
        (-126341, &[0x7b, 0x12, 0xfe]),
        (-13194515, &[0xed, 0xaa, 0x36, 0xff]),
        (-2068145902, &[0x12, 0x99, 0xba, 0x84]),
        (i64::MIN, &[0x00, 0x00, 0x00, 0x80]),
        (0x100112233, &[0x33, 0x22, 0x11, 0x00, 0x01]),
        (0x300112233, &[0x33, 0x22, 0x11, 0x00, 0x03]),
        (0x8000112233, &[0x33, 0x22, 0x11, 0x00, 0x80, 0x00]),
        (0x3cd00112233, &[0x33, 0x22, 0x11, 0x00, 0xcd, 0x03]),
        (0xf92100112233, &[0x33, 0x22, 0x11, 0x00, 0x21, 0xf9, 0x00]),
        (0x749aa00112233, &[0x33, 0x22, 0x11, 0x00, 0xaa, 0x49, 0x07]),
        (0x80112200112233, &[0x33, 0x22, 0x11, 0x00, 0x22, 0x11, 0x80, 0x00]),
        (0x7654321000112233, &[0x33, 0x22, 0x11, 0x00, 0x10, 0x32, 0x54, 0x76]),
        (i64::MAX, &[0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f]),
        (-0x100112233, &[0xcd, 0xdd, 0xee, 0xff, 0xfe]),
        (-0x8000112233, &[0xcd, 0xdd, 0xee, 0xff, 0x7f, 0xff]),
        (-0x3cd00112233, &[0xcd, 0xdd, 0xee, 0xff, 0x32, 0xfc]),
        (-0xf92100112233, &[0xcd, 0xdd, 0xee, 0xff, 0xde, 0x06, 0xff]),
        (-0x749aa00112233, &[0xcd, 0xdd, 0xee, 0xff, 0x55, 0xb6, 0xf8]),
        (-0x80112200112233, &[0xcd, 0xdd, 0xee, 0xff, 0xdd, 0xee, 0x7f, 0xff]),
        (-0x7654321000112233, &[0xcd, 0xdd, 0xee, 0xff, 0xef, 0xcd, 0xab, 0x89]),
        (i64::MIN, &[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80]),
        (-0x100000000, &[0x00, 0x00, 0x00, 0x00, 0xff]),
        (-0x300000000, &[0x00, 0x00, 0x00, 0x00, 0xfd]),
        (-0x8000000000, &[0x00, 0x00, 0x00, 0x00, 0x80]),
        (-0xfe00000000, &[0x00, 0x00, 0x00, 0x00, 0x02, 0xff]),
        (-0xff00000000, &[0x00, 0x00, 0x00, 0x00, 0x01, 0xff]),
        (-0xfeff00000000, &[0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xff]),
        (-0xffff00000000, &[0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff]),
        (-0xfeffff00000000, &[0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0xff]),
        (-0xffffff00000000, &[0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xff]),
    ];

    fn to_bytes(num: &BigInt) -> Vec<u8> {
        let mut bytes = num.to_signed_bytes_le();
        if num.sign() == num_bigint::Sign::Minus {
            for i in bytes.len()..num.bits() as usize / 8 {
                bytes.push(0xff);
            }
        }
        bytes
    }

    fn from_bytes(bytes: &[u8]) -> BigInt {
        BigInt::from_signed_bytes_le(bytes)
    }

    #[test]
    fn test_int_to_bytes() {
        for &(number, buf) in TEST_CASES {
            let num = BigInt::from(number);
            let num_c = num.clone();
            let bytes = to_bytes(&num);
            assert_eq!(buf, bytes.as_slice(), "error while converting {}", number);
            let neg_num_c = -num_c.clone();
            let neg_bytes = to_bytes(&neg_num_c);
            let double_neg_num_c = -neg_num_c;
            assert_eq!(num, double_neg_num_c, "number mismatch after converting {}", number);
        }
    }

    #[test]
    fn test_bytes_to_int() {
        for &(number, buf) in TEST_CASES {
            let num = from_bytes(buf);
            assert_eq!(number, num.to_i64().unwrap(), "error while converting {}", number);
        }

        assert_eq!(0, from_bytes(&[]).to_i64().unwrap());
    }

    #[test]
    fn test_equivalent_representations() {
        for &(number, buf) in TEST_CASES {
            let mut extended_buf = buf.to_vec();
            if number >= 0 {
                extended_buf.extend_from_slice(&[0, 0, 0]);
            } else {
                extended_buf.extend_from_slice(&[0xFF, 0xFF, 0xFF]);
            }

            let num = from_bytes(&extended_buf);
            assert_eq!(number, num.to_i64().unwrap(), "error while converting {}", number);
        }
    }

    const STRING_CASES: &[(&str, &[u8])] = &[
        ("-1256271214286163627607479687759920896", &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]),
        ("168884912246183068104079824028124185087", &[255, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]),
        ("1402184777283668118200134432800768511", &[255, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1]),
        ("-43536131589161850832973096317989605473920", &[128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 128]),
        ("43235871975677457350187428577111288447360", &[128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 127]),
    ];

    const STDLIB_CASES: &[(&str, &[u8])] = &[
        ("0", &[0]),
        ("127", &[0x7F]),
        ("128", &[0x00, 0x80]),
        ("33022", &[0x00, 0x80, 0xFE]),
        ("-32514", &[0x80, 0xFE]),
        ("-18374686475376656384", &[0xff, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00]),
        ("-18446744069414584320", &[0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00]),
        ("12364093636075302621581796971036731159910277399901099375861080574506898189967563102391591201943540153492149033597384108294298661111799425262742266671957323486506857011293831406641316917374615487590434666756862524718179898130435474398176187353530443750986128762955255137790631223519091107256083370837751230886741470719554141609004126665185940207631783192780186624919167901565253877397154522582982120840364212333366972597473045167409184762879376102731157263235904816835054250885637739932914015117504485702897712016943555929710070193511128651378003670520306509417025958556935067307123832592173743652726898616663215056178200135054604939862749863002480827458494339065850786495122398411385446068167146399066035389699059499954747263948595492570959736940353095030589033792026029085438901525807032848103038290802923997216273712349905230080849822000411239032166420681788646737098078876258256753058713515144604794792139863186822520361187685685356628044518258989638970651859178568755065879235553215218267011024902142765549091793970027321040036512883269922219608216030987714165823965404563131018846411947569009598716649463301689241563037584803938711917477764863093448004918315253652379776337794243677630540042379049027", &[0x00, 0xf0, 0x1d, 0x7b, 0xa2, 0xfd, 0x50, 0xf9, 0x50, 0x07, 0xce, 0x2a, 0xdf, 0xfb, 0x75, 0x70, 0x49, 0x5e, 0x5d, 0xf7, 0x1b, 0x0a, 0x76, 0x1f, 0xe7, 0xe3, 0xc7, 0x0a, 0xc7, 0xee, 0xca, 0x4e, 0xa2, 0xe6, 0xae, 0xe8, 0x1a, 0x2c, 0x3b, 0xa9, 0x12, 0x77, 0xb1, 0x47, 0x3c, 0xb5, 0xab, 0x32, 0x26, 0x18, 0x0d, 0x43, 0x51, 0x6b, 0x11, 0x0c, 0x45, 0xed, 0x52, 0x7d, 0xce, 0xe8, 0x75, 0x6c, 0xe1, 0xda, 0xaf, 0x42, 0x1c, 0xc6, 0x21, 0x23, 0x1f, 0x5d, 0x2d, 0x48, 0xf8, 0x20, 0x67, 0x2f, 0x49, 0x3d, 0x3e, 0x5d, 0xc2, 0x53, 0xc8, 0xe0, 0x3d, 0xe2, 0xdc, 0x51, 0x2f, 0x44, 0xc9, 0x72, 0xb6, 0x04, 0xa0, 0x19, 0x1f, 0x03, 0xb9, 0x0f, 0x57, 0x80, 0x55, 0x41, 0x10, 0x7e, 0x7c, 0x78, 0xdc, 0xbb, 0x82, 0x6e, 0x6a, 0xd9, 0x0e, 0xac, 0x87, 0x0c, 0xfd, 0xc0, 0x79, 0xdf, 0xf5, 0x98, 0xfe, 0x9c, 0x58, 0xa9, 0x63, 0xc2, 0x99, 0x31, 0x09, 0x1c, 0x50, 0xcf, 0x03, 0x4f, 0x96, 0xef, 0x98, 0x56, 0x44, 0xc2, 0x0f, 0x63, 0x20, 0x19, 0x0b, 0x60, 0x28, 0x09, 0xb2, 0x3e, 0xe5, 0xe3, 0x91, 0xc2, 0x98, 0x3d, 0xc0, 0x81, 0x0b, 0x5a, 0xdd, 0x88, 0x6a, 0xc1, 0xff, 0x94, 0x7f, 0xe0, 0x96, 0x6b, 0x67, 0x75, 0x80, 0x53, 0xa1, 0x89, 0x14, 0x19, 0x59, 0xdc, 0x13, 0x67, 0x01, 0x7c, 0x64, 0xfe, 0xeb, 0x7b, 0x8c, 0x97, 0x2d, 0x1a, 0x90, 0x48, 0x4b, 0xea, 0x48, 0xc0, 0x77, 0x23, 0x68, 0x65, 0x19, 0xcf, 0xcf, 0x1c, 0x89, 0x93, 0xe0, 0xd2, 0xfd, 0x81, 0x6a, 0x6e, 0xd8, 0x76, 0xad, 0x65, 0xb5, 0xe0, 0xe1, 0xe2, 0x9c, 0x13, 0x70, 0x0e, 0x79, 0x1c, 0xaa, 0xac, 0x0d, 0x3f, 0x10, 0x4e, 0x47, 0x36, 0xb9, 0x23, 0xd3, 0x6a, 0x50, 0x9a, 0xe2, 0x83, 0x94, 0xf8, 0x1b, 0x41, 0x4c, 0x22, 0x92, 0x58, 0x9f, 0xc8, 0xad, 0x36, 0x51, 0x59, 0xa6, 0xbb, 0x86, 0x4f, 0x9d, 0x3a, 0x9f, 0x1d, 0x0b, 0x2e, 0x7f, 0xf8, 0x83, 0xfd, 0x1c, 0x3b, 0xe1, 0x3d, 0xb2, 0xdc, 0x13, 0x18, 0x71, 0xec, 0x63, 0xf3, 0xfc, 0x41, 0x6f, 0x14, 0xec, 0xcc, 0x7f, 0x28, 0xeb, 0x12, 0xc6, 0x4c, 0xa4, 0x92, 0x7f, 0x7a, 0x65, 0xcf, 0x8f, 0x63, 0x47, 0x3e, 0x4f, 0xeb, 0x03, 0x7b, 0x20, 0xf8, 0x01, 0xa2, 0x9d, 0xe2, 0x5f, 0x85, 0xfb, 0x7b, 0xdf, 0x10, 0x45, 0x2f, 0x6f, 0xb2, 0x6b, 0xff, 0x69, 0xf5, 0x64, 0x8e, 0x18, 0x71, 0x7a, 0x04, 0x31, 0xc3, 0xf8, 0xa0, 0x6c, 0x0f, 0x0a, 0x57, 0x83, 0x83, 0x58, 0xda, 0xaf, 0x99, 0xe6, 0x68, 0x13, 0xe8, 0x15, 0xbc, 0xd7, 0xef, 0xb2, 0x4b, 0x08, 0x18, 0x97, 0xb2, 0x77, 0x0c, 0xb5, 0x96, 0xdb, 0x21, 0x14, 0x39, 0x52, 0x9f, 0x83, 0x47, 0x96, 0xe8, 0x9f, 0x94, 0xe2, 0x73, 0x40, 0x02, 0x7f, 0xbd, 0xb9, 0x65, 0x6a, 0x33, 0x15, 0xb8, 0xc8, 0x9d, 0x12, 0xf9, 0x14, 0x04, 0x77, 0x56, 0xdc, 0x87, 0xd2, 0xca, 0xb2, 0x05, 0x99, 0xad, 0xa6, 0xd2, 0x81, 0x8f, 0x64, 0xcd, 0xe5, 0x70, 0x2c, 0xbf, 0xc0, 0xb6, 0xb7, 0xa8, 0x4a, 0x45, 0x6b, 0x98, 0x8f, 0x5b, 0xb8, 0x87, 0xf5, 0x64, 0xd1, 0x67, 0xd6, 0xdd, 0x76, 0x29, 0xf0, 0x77, 0x45, 0xfc, 0x27, 0xa4, 0x4a, 0xac, 0xaa, 0x1a, 0x90, 0xbe, 0xf8, 0x91, 0x50, 0x30, 0x6d, 0x73, 0x49, 0x3c, 0xab, 0xa4, 0xaf, 0x13, 0xa8, 0xdd, 0x0a, 0xf5, 0xc3, 0x34, 0x98, 0xb4, 0x7f, 0x0b, 0xb4, 0x63, 0x0f, 0xe3, 0x6e, 0xcc, 0xf8, 0x1d, 0xea, 0x34, 0x71, 0x8b, 0x06, 0xa5, 0x4f, 0x81, 0x12, 0xa9, 0xfd, 0xb8, 0x43]),
    ];

    #[test]
    fn test_very_big_ints() {
        for &(num_str, buf) in STRING_CASES {
            let num = BigInt::from_str(num_str).unwrap();
            let result = from_bytes(buf);
            assert_eq!(num, result, "error while converting {} from bytes", num_str);
            assert_eq!(buf, to_bytes(&result).as_slice(), "error while converting {} to bytes", num_str);
        }

        for &(num_str, buf) in STDLIB_CASES {
            let num = BigInt::from_str(num_str).unwrap();
            let mut revb = buf.to_vec();
            revb.reverse();
            let result = from_bytes(&revb);
            assert_eq!(num, result, "error while converting {} from bytes", num_str);
        }
    }
}
