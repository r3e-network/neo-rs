// Code generated by "stringer -type=CommandType -output=message_string.go"; DO NOT EDIT.

use std::fmt;

#[derive(Debug, PartialEq, Eq)]
pub enum CommandType {
    CMDVersion,
    CMDVerack,
    CMDGetAddr,
    CMDAddr,
    CMDPing,
    CMDPong,
    CMDGetHeaders,
    CMDHeaders,
    CMDGetBlocks,
    CMDMempool,
    CMDInv,
    CMDGetData,
    CMDGetBlockByIndex,
    CMDNotFound,
    CMDTX,
    CMDBlock,
    CMDExtensible,
    CMDP2PNotaryRequest,
    CMDGetMPTData,
    CMDMPTData,
    CMDReject,
    CMDFilterLoad,
    CMDFilterAdd,
    CMDFilterClear,
    CMDMerkleBlock,
    CMDAlert,
}

impl CommandType {
    fn as_str(&self) -> &'static str {
        match self {
            CommandType::CMDVersion => "CMDVersion",
            CommandType::CMDVerack => "CMDVerack",
            CommandType::CMDGetAddr => "CMDGetAddr",
            CommandType::CMDAddr => "CMDAddr",
            CommandType::CMDPing => "CMDPing",
            CommandType::CMDPong => "CMDPong",
            CommandType::CMDGetHeaders => "CMDGetHeaders",
            CommandType::CMDHeaders => "CMDHeaders",
            CommandType::CMDGetBlocks => "CMDGetBlocks",
            CommandType::CMDMempool => "CMDMempool",
            CommandType::CMDInv => "CMDInv",
            CommandType::CMDGetData => "CMDGetData",
            CommandType::CMDGetBlockByIndex => "CMDGetBlockByIndex",
            CommandType::CMDNotFound => "CMDNotFound",
            CommandType::CMDTX => "CMDTX",
            CommandType::CMDBlock => "CMDBlock",
            CommandType::CMDExtensible => "CMDExtensible",
            CommandType::CMDP2PNotaryRequest => "CMDP2PNotaryRequest",
            CommandType::CMDGetMPTData => "CMDGetMPTData",
            CommandType::CMDMPTData => "CMDMPTData",
            CommandType::CMDReject => "CMDReject",
            CommandType::CMDFilterLoad => "CMDFilterLoad",
            CommandType::CMDFilterAdd => "CMDFilterAdd",
            CommandType::CMDFilterClear => "CMDFilterClear",
            CommandType::CMDMerkleBlock => "CMDMerkleBlock",
            CommandType::CMDAlert => "CMDAlert",
        }
    }
}

impl fmt::Display for CommandType {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
