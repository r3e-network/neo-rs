// Code generated by "stringer -type=Type -output=trigger_type_string.go"; DO NOT EDIT.

use std::fmt;

#[derive(Clone, Copy, PartialEq, Eq, Debug)]
pub enum Type {
    OnPersist = 1,
    PostPersist = 2,
    Verification = 32,
    Application = 64,
    All = 99,
}

impl Type {
    const _TYPE_NAME_0: &'static str = "OnPersistPostPersist";
    const _TYPE_NAME_1: &'static str = "Verification";
    const _TYPE_NAME_2: &'static str = "Application";
    const _TYPE_NAME_3: &'static str = "All";

    const _TYPE_INDEX_0: [usize; 3] = [0, 9, 20];
}

impl fmt::Display for Type {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match *self as u8 {
            1..=2 => {
                let i = (*self as u8) - 1;
                write!(f, "{}", &Self::_TYPE_NAME_0[Self::_TYPE_INDEX_0[i as usize]..Self::_TYPE_INDEX_0[i as usize + 1]])
            }
            32 => write!(f, "{}", Self::_TYPE_NAME_1),
            64 => write!(f, "{}", Self::_TYPE_NAME_2),
            99 => write!(f, "{}", Self::_TYPE_NAME_3),
            _ => write!(f, "Type({})", *self as i64),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_type_values() {
        assert_eq!(Type::OnPersist as u8, 1);
        assert_eq!(Type::PostPersist as u8, 2);
        assert_eq!(Type::Verification as u8, 32);
        assert_eq!(Type::Application as u8, 64);
        assert_eq!(Type::All as u8, 99);
    }
}
